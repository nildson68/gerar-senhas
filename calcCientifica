import tkinter as tk
from tkinter import font
import math

class ScientificCalculator(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title("Calculadora Científica")
        self.geometry("420x600")
        self.resizable(False, False)
        self.configure(bg="#ffffff")

        # Fonts
        self.display_font = font.Font(family="Inter", size=28, weight="bold")
        self.button_font = font.Font(family="Inter", size=14, weight="bold")

        # Expression string
        self.expression = ""

        # Create UI components
        self.create_display()
        self.create_buttons()

    def create_display(self):
        self.display_var = tk.StringVar()
        self.display_var.set("0")

        display_frame = tk.Frame(self, bg="#ffffff", bd=0, relief="ridge")
        display_frame.pack(pady=(20, 15), padx=20, fill="x")

        self.display_label = tk.Label(
            display_frame,
            textvariable=self.display_var,
            anchor="e",
            bg="#f9fafb",
            fg="#111827",
            font=self.display_font,
            padx=20,
            pady=15,
            relief="sunken",
            bd=2,
        )
        self.display_label.pack(fill="x", ipady=10)
        # Rounded corners placeholder for future enhancement

    def create_buttons(self):
        button_frame = tk.Frame(self, bg="#ffffff")
        button_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        # Define button layout & labels: rows with functions + numbers + operators
        buttons = [
            # row 0: Clear, Parentheses, factorial, divide
            ["C", "(", ")", "!", "÷"],
            # row 1: sin, cos, tan, ln, multiply
            ["sin", "cos", "tan", "ln", "×"],
            # row 2: asin, acos, atan, log, minus
            ["asin", "acos", "atan", "log", "−"],
            # row 3: sqrt, x^2, x^y, e^x, plus
            ["√", "x²", "xʸ", "eˣ", "+"],
            # row 4: 7,8,9, comma, equals
            ["7", "8", "9", ".", "="],
            # row 5: 4,5,6, 0, 1, 2
            ["4", "5", "6", "0", "1", "2"],
            # row 6: 3
            ["3"]
        ]

        # Because last row is irregular, will organize rows carefully:
        # We will organize buttons in grid: 6 columns wide (max)
        # Placement from bottom rows corrected.

        # Custom layout with precise grid placement:
        # For rows 0-4, 5 buttons each except row 4 with 5 buttons and row 5 will be split.

        # For UI consistency, I will rearrange all buttons properly with clear grid.

        # Instead, I will create a simpler layout with 6 cols:

        # Final planned layout:
        # Row 0: C, (, ), !, ÷, sin
        # Row 1: cos, tan, ln, ×, asin, acos
        # Row 2: atan, log, √, x², xʸ, eˣ
        # Row 3: 7,8,9,−,4,5
        # Row 4: 6, +, 1,2,3,=
        # Row 5: 0, ., empty, empty, empty, empty

        labels = [
            ["C", "(", ")", "!", "÷", "sin"],
            ["cos", "tan", "ln", "×", "asin", "acos"],
            ["atan", "log", "√", "x²", "xʸ", "eˣ"],
            ["7", "8", "9", "−", "4", "5"],
            ["6", "+", "1", "2", "3", "="],
            ["0", ".", "", "", "", ""],
        ]

        # Define colors
        operator_color = "#2563eb"
        operator_fg = "#ffffff"
        func_color = "#ef4444"
        func_fg = "#ffffff"
        number_color = "#f3f4f6"
        number_fg = "#111827"
        empty_color = "#ffffff"

        # Create buttons in grid 6x6
        for r, row in enumerate(labels):
            for c, char in enumerate(row):
                if char == "":
                    # Empty space
                    placeholder = tk.Label(button_frame, bg="#ffffff")
                    placeholder.grid(row=r, column=c, padx=6, pady=6, sticky="nsew")
                    continue

                # Determine color by type
                if char in {"C", "!", "=", "÷", "×", "−", "+", "√", "x²", "xʸ", "eˣ"}:
                    bg = operator_color
                    fg = operator_fg
                elif char in {"sin", "cos", "tan", "ln", "asin", "acos", "atan", "log"}:
                    bg = func_color
                    fg = func_fg
                else:
                    bg = number_color
                    fg = number_fg

                btn = tk.Label(
                    button_frame,
                    text=char,
                    bg=bg,
                    fg=fg,
                    font=self.button_font,
                    relief="raised",
                    borderwidth=2,
                    padx=10,
                    pady=12,
                    cursor="hand2",
                )
                btn.grid(row=r, column=c, sticky="nsew", padx=6, pady=6)
                self.round_corners(btn)

                btn.bind("<Button-1>", lambda e, ch=char: self.on_button_click(ch))
                btn.bind("<Enter>", lambda e, b=btn, c=self.darken_color(bg): b.config(bg=c))
                btn.bind("<Leave>", lambda e, b=btn, c=bg: b.config(bg=c))

        # Configure grid weights for equal sizing
        for i in range(6):
            button_frame.columnconfigure(i, weight=1)
        for i in range(6):
            button_frame.rowconfigure(i, weight=1)

    def darken_color(self, hex_color, factor=0.85):
        """Darken a hex color by a factor."""
        hex_color = hex_color.lstrip("#")
        rgb = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        dark_rgb = tuple(max(0, int(c*factor)) for c in rgb)
        return f"#{dark_rgb[0]:02x}{dark_rgb[1]:02x}{dark_rgb[2]:02x}"

    def round_corners(self, widget):
        # Tkinter does not natively support rounded corners.
        # Placeholder for future image or canvas solution.
        pass

    def on_button_click(self, char):
        if char == "C":
            self.expression = ""
            self.display_var.set("0")
            return

        if char == "=":
            self.calculate()
            return

        # Map displayed operators/functions to expression strings
        maps = {
            "÷": "/",
            "×": "*",
            "−": "-",
            "+": "+",
            "√": "sqrt(",
            "x²": "**2",
            "xʸ": "**",
            "eˣ": "exp(",
            "!": "fact(",
            "sin": "sin(",
            "cos": "cos(",
            "tan": "tan(",
            "asin": "asin(",
            "acos": "acos(",
            "atan": "atan(",
            "log": "log10(",
            "ln": "log(",
        }

        if char in maps:
            # Special case for postfix factorial: add fact function and open paren if needed
            if char == "!":
                # if expression is empty or ends with operator, ignore factorial
                if not self.expression or self.expression[-1] in "+-*/(":
                    return
                self.expression += "fact("
            else:
                self.expression += maps[char]
        else:
            # Normal digit or dot or parenthesis
            self.expression += char

        self.display_var.set(self.expression)

    def calculate(self):
        try:
            expr = self.expression

            # Replace any factorial usage by custom function call
            # We interpret fact() as factorial around last number entered before fact(
            # But for safety, since user types fact( explicitly only after !, we can map fact(x) to factorial
            
            # Replace 'fact(' with a function call: define fact in eval environment
            expr = expr.replace("fact(", "fact(")  # Remains same, handled in eval locals

            # Fix for exponentiation: "xʸ" was replaced with "**" added directly

            # Close any open parentheses automatically (optional for usability)
            opened = expr.count("(")
            closed = expr.count(")")
            expr += ")" * (opened - closed)

            # Define safe evaluation environment
            safe_dict = {
                'sin': math.sin,
                'cos': math.cos,
                'tan': math.tan,
                'asin': math.asin,
                'acos': math.acos,
                'atan': math.atan,
                'log': math.log,
                'log10': math.log10,
                'sqrt': math.sqrt,
                'exp': math.exp,
                'fact': math.factorial,
                '__builtins__': None,
                'pi': math.pi,
                'e': math.e,
            }

            # Convert expression safely with eval
            result = eval(expr, safe_dict)

            # Format float output nicely
            if isinstance(result, float):
                result = round(result, 10)
                if result.is_integer():
                    result = int(result)
            self.expression = str(result)
            self.display_var.set(self.expression)

        except Exception:
            self.display_var.set("Erro")
            self.expression = ""

if __name__ == "__main__":
    app = ScientificCalculator()
    app.mainloop()

